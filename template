<DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8" />
      <title>Chart</title>
    </head>
    <body>
      <div id="container"></div>

      <script src="https://d3js.org/d3.v7.min.js"></script>
      <script>
        // Set up the dataset.
        const nodes = [{{ jsStringArray .Nodes }}];
        const edges = [{{ jsIntMatrix .Edges }}];

        // Config.
        const width = 500;
        const height = width;
        const innerRadius = Math.min(width, height) * 0.5 - 90;
        const outerRadius = innerRadius + 10;

        // Chord func.
        const chord = d3.chordDirected()
          .padAngle(10 / innerRadius)
          .sortSubgroups(d3.descending)
          .sortChords(d3.descending);

        // Arc func.
        const arc = d3.arc()
          .innerRadius(innerRadius)
          .outerRadius(outerRadius);

        // Ribbon func.
        const ribbon = d3.ribbonArrow()
          .radius(innerRadius - 1)
          .padAngle(1 / innerRadius);

        // Color func.
        const color = d3.scaleOrdinal(nodes, d3.quantize(d3.interpolateRainbow, nodes.length+1));

        // Calculate chords.
        const chords = chord(edges);

        // Generate SVG.
        const svg = d3.create("svg")
          .attr("viewBox", [-width / 2, -height / 2, width, height]);

        const group = svg.append("g")
          .attr("font-size", 10)
          .attr("font-family", "sans-serif")
          .selectAll("g")
          .data(chords.groups)
          .join("g")

        group.append("path")
          .attr("fill", d => color(nodes[d.index]))
          .attr("d", arc)

        group.append("text")
          .each(d => (d.angle = (d.startAngle + d.endAngle) / 2))
          .attr("dy", "0.35em")
          .attr("transform", d => `
            rotate(${(d.angle * 100 / Math.PI - 90)})
            translate(${outerRadius + 5})
            ${d.angle > Math.PI ? "rotate(180)" : ""}
          `)
          .attr("text-anchor", d => d.angle > Math.PI ? "end" : null)
          .text(d => nodes[d.index]);

        group.append("title")
          .text(d => `${nodes[d.index]}
            ${d3.sum(chords, c => (c.source.index === d.index) * c.source.value)} outgoing ->
            ${d3.sum(chords, c => (c.target.index === d.index) * c.source.value)} incoming <-`);

        svg.append("g")
          .attr("fill-opacity", 0.75)
          .selectAll("path")
          .data(chords)
          .join("path")
          .style("min-blend-mode", "multiply")
          .attr("fill", d => color(nodes[d.target.index]))
          .attr("d", ribbon)
          .append("title")
          .text(d => `${nodes[d.source.index]} -> ${nodes[d.target.index]} ${d.source.value}`);

        d3.select("#container").node().appendChild(svg.node());
      </script>
    </body>
  </html>
</DOCTYPE>
